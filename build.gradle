plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'biz.aQute.bnd.builder' apply false
}

import aQute.bnd.gradle.Bndrun
import aQute.bnd.gradle.Export
import aQute.bnd.gradle.Resolve

def VERSION = "1.0"

version = VERSION

//  bnd attempts to use ~/ for caching if this is unavailable the build will fail.
System.setProperty("bnd.home.dir", "$rootDir/bnd")

allprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    compileKotlin {
        kotlinOptions {
            apiVersion = "1.4"
            languageVersion = "1.4"
            jvmTarget = "11"
            suppressWarnings = true
        }
    }
}

subprojects {

    apply plugin: 'biz.aQute.bnd.builder'

    dependencies {
        compileOnly group: 'org.osgi', name: "osgi.core", version: osgiVersion
        compileOnly group: 'org.osgi', name: "osgi.annotation", version: osgiVersion
        compileOnly group: 'org.osgi', name: "osgi.cmpn", version: osgiVersion
        compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations", version: osgiScrAnnotationVersion
        compileOnly group: "org.osgi", name: "org.osgi.service.cm", version: osgiCmVersion
        compileOnly group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
//        compileOnly group: "biz.aQute.bnd", name: "biz.aQute.bnd.annotation", version:  bndVersion
    }

    version = VERSION
}


configurations {
    bundleClasspath {
        extendsFrom(runtimeClasspath)
        // The `osgi.core` and `osgi.cmpn` should be declared as `compileOnly` dependencies
        // but many osgi packages include them as transitive dependencies unfortunately
        exclude group: "org.osgi", module: "osgi.core"
        exclude group: "org.osgi", module: "osgi.cmpn"
//        exclude group: "org.jetbrains.kotlin"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    implementation group: "com.beust", name: "jcommander", version: jcommanderVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    implementation group: "org.apache.felix", name: "org.apache.felix.framework", version: felixVersion
    implementation group: "org.apache.felix", name: "org.apache.felix.scr", version: felixScrVersion
    implementation group: "org.osgi", name: "org.osgi.util.promise", version: osgiUtilPromiseVersion
    implementation group: "org.osgi", name: "org.osgi.util.function", version: osgiUtilFunctionVersion
    implementation group: "org.osgi", name: "org.osgi.service.serviceloader", version: osgiServiceServiceLoaderVersion

    implementation project(":bundles:A")
    implementation project(":bundles:B")
    implementation project(":system")

    // Tests' classpath needs to access `$project.buildDir/resources/main` to run tests for this module.

    //  Declare below the 3rd parties dependencies `bundle` task pack in this module to bootstrap Corda node.
    //
    implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

//tasks.register("run", JavaExec) { task ->
//    def dependentProjects = [":bundles:A", ":bundles:B"]
//    dependentProjects.each { projectPath ->
//        task.inputs.files(project(projectPath).tasks.named("jar").get().outputs.files)
//    }
//    mainClass = 'net.woggioni.osgi.surgery.Launcher'
//    classpath sourceSets.main.runtimeClasspath
//    configurations.bundleClasspath.files.each {
//        args("-b", it.absolutePath)
//    }
//    systemProperties([
//        "thread.leak" : true
//    ])
//}

tasks.named("test", Test) { task ->
    useJUnitPlatform()
    def dependentProjects = [":bundles:A", ":bundles:B", ":bundles:B2"]
    dependentProjects.each { projectPath ->
        def taskOutput = project(projectPath).tasks.named("jar").get().outputs.files
        def jarFile = taskOutput.singleFile
        task.inputs.files(taskOutput)
        String key = projectPath.substring(1).replace(':', '.')
        task.systemProperties[key] = jarFile.toString()
    }
}

tasks.register("export", Export.class) {
    bndrun = 'export.bndrun'
    bundles = project.files(configurations.bundleClasspath)
}

tasks.register('run', Bndrun.class) {
    bndrun = 'export.bndrun'
}

//def resolve = tasks.register('resolve', Resolve) {
//    bundles = project.files(configurations.bundleClasspath)
//    bndrun = file('export.bndrun')
//}